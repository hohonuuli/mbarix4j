/**
 * Title:        <p>
 * Description:  <p>
 * Copyright:    Copyright (c) <p>
 * Company:      <p>
 * @author
 * @version 1.0
 */
package org.mbari.solar;

import org.mbari.math.Matlib;
import org.mbari.util.*;
import java.io.IOException;
import org.mbari.io.FlatFileReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SolarUtil {

    private static final Logger log = LoggerFactory.getLogger(SolarUtil.class);
    public static final double EARTH_ORBIT_ECCENTRICITY = 0.0167; // Earth's orbital eccentricity
    static double[][] DOBSON_TABLE = new double[35][12];
    
    private static final double[] OZONE_LAMBDA = {
        350.0,351.0,352.0,353.0,354.0,355.0,356.0,357.0,358.0,359.0,360.0,361.0,362.0,
        363.0,364.0,365.0,366.0,367.0,368.0,369.0,370.0,371.0,372.0,373.0,374.0,375.0,
        376.0,377.0,378.0,379.0,380.0,381.0,382.0,383.0,384.0,385.0,386.0,387.0,388.0,
        389.0,390.0,391.0,392.0,393.0,394.0,395.0,396.0,397.0,398.0,399.0,400.0,401.0,
        402.0,403.0,404.0,405.0,406.0,407.0,408.0,409.0,410.0,411.0,412.0,413.0,414.0,
        415.0,416.0,417.0,418.0,419.0,420.0,421.0,422.0,423.0,424.0,425.0,426.0,427.0,
        428.0,429.0,430.0,431.0,432.0,433.0,434.0,435.0,436.0,437.0,438.0,439.0,440.0,
        441.0,442.0,443.0,444.0,445.0,446.0,447.0,448.0,449.0,450.0,451.0,452.0,453.0,
        454.0,455.0,456.0,457.0,458.0,459.0,460.0,461.0,462.0,463.0,464.0,465.0,466.0,
        467.0,468.0,469.0,470.0,471.0,472.0,473.0,474.0,475.0,476.0,477.0,478.0,479.0,
        480.0,481.0,482.0,483.0,484.0,485.0,486.0,487.0,488.0,489.0,490.0,491.0,492.0,
        493.0,494.0,495.0,496.0,497.0,498.0,499.0,500.0,501.0,502.0,503.0,504.0,505.0,
        506.0,507.0,508.0,509.0,510.0,511.0,512.0,513.0,514.0,515.0,516.0,517.0,518.0,
        519.0,520.0,521.0,522.0,523.0,524.0,525.0,526.0,527.0,528.0,529.0,530.0,531.0,
        532.0,533.0,534.0,535.0,536.0,537.0,538.0,539.0,540.0,541.0,542.0,543.0,544.0,
        545.0,546.0,547.0,548.0,549.0,550.0,551.0,552.0,553.0,554.0,555.0,556.0,557.0,
        558.0,559.0,560.0,561.0,562.0,563.0,564.0,565.0,566.0,567.0,568.0,569.0,570.0,
        571.0,572.0,573.0,574.0,575.0,576.0,577.0,578.0,579.0,580.0,581.0,582.0,583.0,
        584.0,585.0,586.0,587.0,588.0,589.0,590.0,591.0,592.0,593.0,594.0,595.0,596.0,
        597.0,598.0,599.0,600.0,601.0,602.0,603.0,604.0,605.0,606.0,607.0,608.0,609.0,
        610.0,611.0,612.0,613.0,614.0,615.0,616.0,617.0,618.0,619.0,620.0,621.0,622.0,
        623.0,624.0,625.0,626.0,627.0,628.0,629.0,630.0,631.0,632.0,633.0,634.0,635.0,
        636.0,637.0,638.0,639.0,640.0,641.0,642.0,643.0,644.0,645.0,646.0,647.0,648.0,
        649.0,650.0,651.0,652.0,653.0,654.0,655.0,656.0,657.0,658.0,659.0,660.0,661.0,
        662.0,663.0,664.0,665.0,666.0,667.0,668.0,669.0,670.0,671.0,672.0,673.0,674.0,
        675.0,676.0,677.0,678.0,679.0,680.0,681.0,682.0,683.0,684.0,685.0,686.0,687.0,
        688.0,689.0,690.0,691.0,692.0,693.0,694.0,695.0,696.0,697.0,698.0,699.0,700.0,
        701.0,702.0,703.0,704.0,705.0,706.0,707.0,708.0,709.0,710.0,711.0,712.0,713.0,
        714.0,715.0,716.0,717.0,718.0,719.0,720.0,721.0,722.0,723.0,724.0,725.0,726.0,
        727.0,728.0,729.0,730.0,731.0,732.0,733.0,734.0,735.0,736.0,737.0,738.0,739.0,
        740.0,741.0,742.0,743.0,744.0,745.0,746.0,747.0,748.0,749.0,750.0,751.0,752.0,
        753.0,754.0,755.0,756.0,757.0,758.0,759.0,760.0,761.0,762.0,763.0,764.0,765.0,
        766.0,767.0,768.0,769.0,770.0,771.0,772.0,773.0,774.0,775.0,776.0,777.0,778.0,
        779.0,780.0,781.0,782.0,783.0,784.0,785.0,786.0,787.0,788.0,789.0,790.0,791.0,
        792.0,793.0,794.0,795.0,796.0,797.0,798.0,799.0,800.0,801.0,802.0,803.0,804.0,
        805.0,806.0,807.0,808.0,809.0,810.0,811.0,812.0,813.0,814.0,815.0,816.0,817.0,
        818.0,819.0,820.0,821.0,822.0,823.0,824.0,825.0,826.0,827.0,828.0,829.0,830.0,
        831.0,832.0,833.0,834.0,835.0,836.0,837.0,838.0,839.0,840.0,841.0,842.0,843.0,
        844.0,845.0,846.0,847.0,848.0,849.0,850.0,851.0,852.0,853.0,854.0,855.0,856.0,
        857.0,858.0,859.0,860.0,861.0,862.0,863.0,864.0,865.0,866.0,867.0,868.0,869.0,
        870.0,871.0,872.0,873.0,874.0,875.0,876.0,877.0,878.0,879.0,880.0,881.0,882.0,
        883.0,884.0,885.0,886.0,887.0,888.0,889.0,890.0,891.0,892.0,893.0,894.0,895.0,
        896.0,897.0,898.0,899.0,900.0,901.0,902.0,903.0,904.0,905.0,906.0,907.0,908.0,
        909.0,910.0,911.0,912.0,913.0,914.0,915.0,916.0,917.0,918.0,919.0,920.0,921.0,
        922.0,923.0,924.0,925.0,926.0,927.0,928.0,929.0,930.0,931.0,932.0,933.0,934.0,
        935.0,936.0,937.0,938.0,939.0,940.0,941.0,942.0,943.0,944.0,945.0,946.0,947.0,
        948.0,949.0,950.0,951.0,952.0,953.0,954.0,955.0,956.0,957.0,958.0,959.0,960.0,
        961.0,962.0,963.0,964.0,965.0,966.0,967.0,968.0,969.0,970.0,971.0,972.0,973.0,
        974.0,975.0,976.0,977.0,978.0,979.0,980.0,981.0,982.0,983.0,984.0,985.0,986.0,
        987.0,988.0,989.0,990.0,991.0,992.0,993.0,994.0,995.0,996.0,997.0,998.0,999.0,
        1000.0
    };
    
    private static final double[] OZONE_ABSORPTION = {
        0.0089999996,0.0119999992,0.0089999996,0.0059999996,0.0039999997,0.0019999999,
        0.0019999999,0.0009999999,0.0009999999,0.0009999999,0.0000000000,0.0000000000,
        0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,
        0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,
        0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,
        0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,
        0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,
        0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,
        0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,
        0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,
        0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,
        0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,
        0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,
        0.0009999999,0.0009999999,0.0009999999,0.0009999999,0.0009999999,0.0019999999,
        0.0019999999,0.0019999999,0.0019999999,0.0019999999,0.0019999999,0.0029999998,
        0.0029999998,0.0029999998,0.0029999998,0.0029999998,0.0029999998,0.0029999998,
        0.0029999998,0.0029999998,0.0029999998,0.0029999998,0.0029999998,0.0029999998,
        0.0039999997,0.0039999997,0.0049999999,0.0049999999,0.0059999996,0.0069999998,
        0.0069999998,0.0079999994,0.0079999994,0.0089999996,0.0089999996,0.0089999996,
        0.0089999996,0.0079999994,0.0079999994,0.0069999998,0.0069999998,0.0069999998,
        0.0069999998,0.0079999994,0.0089999996,0.0099999998,0.0109999999,0.0119999992,
        0.0129999993,0.0139999995,0.0149999997,0.0169999991,0.0179999992,0.0189999994,
        0.0199999996,0.0199999996,0.0209999997,0.0199999996,0.0199999996,0.0189999994,
        0.0189999994,0.0179999992,0.0179999992,0.0189999994,0.0189999994,0.0199999996,
        0.0209999997,0.0219999999,0.0229999982,0.0239999983,0.0249999985,0.0259999987,
        0.0279999990,0.0299999993,0.0319999978,0.0339999981,0.0359999985,0.0379999988,
        0.0389999971,0.0409999974,0.0409999974,0.0409999974,0.0399999991,0.0389999971,
        0.0379999988,0.0369999968,0.0369999968,0.0379999988,0.0389999971,0.0409999974,
        0.0419999994,0.0439999998,0.0449999981,0.0469999984,0.0489999987,0.0509999990,
        0.0519999973,0.0539999977,0.0559999980,0.0579999983,0.0589999966,0.0609999970,
        0.0629999936,0.0639999956,0.0659999996,0.0679999962,0.0689999983,0.0699999928,
        0.0709999949,0.0719999969,0.0719999969,0.0719999969,0.0719999969,0.0729999989,
        0.0739999935,0.0749999955,0.0759999976,0.0769999996,0.0789999962,0.0799999982,
        0.0809999928,0.0829999968,0.0839999989,0.0849999934,0.0859999955,0.0869999975,
        0.0879999995,0.0889999941,0.0899999961,0.0909999982,0.0919999927,0.0939999968,
        0.0959999934,0.0979999974,0.0999999940,0.1029999927,0.1049999967,0.1069999933,
        0.1089999974,0.1119999960,0.1129999980,0.1149999946,0.1159999967,0.1169999987,
        0.1179999933,0.1189999953,0.1189999953,0.1189999953,0.1189999953,0.1189999953,
        0.1189999953,0.1179999933,0.1169999987,0.1159999967,0.1149999946,0.1139999926,
        0.1119999960,0.1109999940,0.1099999994,0.1089999974,0.1089999974,0.1079999954,
        0.1079999954,0.1089999974,0.1099999994,0.1119999960,0.1129999980,0.1149999946,
        0.1169999987,0.1189999953,0.1209999993,0.1219999939,0.1239999980,0.1250000000,
        0.1250000000,0.1250000000,0.1250000000,0.1239999980,0.1229999959,0.1219999939,
        0.1199999973,0.1189999953,0.1179999933,0.1159999967,0.1149999946,0.1139999926,
        0.1119999960,0.1109999940,0.1099999994,0.1079999954,0.1069999933,0.1049999967,
        0.1039999947,0.1029999927,0.1009999961,0.0999999940,0.0989999995,0.0969999954,
        0.0959999934,0.0939999968,0.0929999948,0.0919999927,0.0899999961,0.0889999941,
        0.0879999995,0.0859999955,0.0849999934,0.0829999968,0.0819999948,0.0809999928,
        0.0789999962,0.0779999942,0.0769999996,0.0749999955,0.0739999935,0.0729999989,
        0.0709999949,0.0699999928,0.0679999962,0.0669999942,0.0659999996,0.0649999976,
        0.0639999956,0.0629999936,0.0619999990,0.0609999970,0.0599999987,0.0589999966,
        0.0579999983,0.0569999963,0.0559999980,0.0559999980,0.0549999997,0.0539999977,
        0.0529999994,0.0519999973,0.0509999990,0.0509999990,0.0499999970,0.0489999987,
        0.0479999967,0.0469999984,0.0459999964,0.0449999981,0.0449999981,0.0439999998,
        0.0429999977,0.0419999994,0.0409999974,0.0399999991,0.0399999991,0.0389999971,
        0.0379999988,0.0369999968,0.0359999985,0.0349999964,0.0339999981,0.0339999981,
        0.0329999998,0.0319999978,0.0309999995,0.0299999993,0.0299999993,0.0289999992,
        0.0279999990,0.0269999988,0.0259999987,0.0249999985,0.0239999983,0.0239999983,
        0.0229999982,0.0219999999,0.0219999999,0.0209873207,0.0203382690,0.0197092891,
        0.0190997627,0.0185090862,0.0179366767,0.0173819698,0.0168444160,0.0163234882,
        0.0158186704,0.0153294643,0.0148553876,0.0143959718,0.0139507642,0.0135193244,
        0.0131012276,0.0126960604,0.0123034241,0.0119229294,0.0115542030,0.0111968787,
        0.0108506056,0.0105150416,0.0101898545,0.0098747239,0.0095693395,0.0092733996,
        0.0089866119,0.0087086931,0.0084393686,0.0081783738,0.0079254508,0.0076803495,
        0.0074428283,0.0072126519,0.0069895945,0.0067734350,0.0065639610,0.0063609648,
        0.0061642462,0.0059736115,0.0057888725,0.0056098467,0.0054363571,0.0052682329,
        0.0051053083,0.0049474221,0.0047944188,0.0046461471,0.0045024613,0.0043632188,
        0.0042282823,0.0040975190,0.0039707995,0.0038479993,0.0037289965,0.0036136741,
        0.0035019182,0.0033936182,0.0032886676,0.0031869628,0.0030884030,0.0029928915,
        0.0029003338,0.0028106384,0.0027237169,0.0026394837,0.0025578553,0.0024787514,
        0.0024020940,0.0023278070,0.0022558176,0.0021860544,0.0021184487,0.0020529339,
        0.0019894452,0.0019279199,0.0018682973,0.0018105186,0.0017545267,0.0017002665,
        0.0016476843,0.0015967281,0.0015473480,0.0014994949,0.0014531217,0.0014081827,
        0.0013646333,0.0013224309,0.0012815335,0.0012419010,0.0012034941,0.0011662750,
        0.0011302070,0.0010952543,0.0010613826,0.0010285585,0.0009967494,0.0009659241,
        0.0009360520,0.0009071038,0.0008790508,0.0008518654,0.0008255207,0.0007999908,
        0.0007752504,0.0007512751,0.0007280412,0.0007055259,0.0006837070,0.0006625627,
        0.0006420724,0.0006222157,0.0006029732,0.0005843257,0.0005662549,0.0005487430,
        0.0005317726,0.0005153271,0.0004993902,0.0004839461,0.0004689796,0.0004544760,
        0.0004404210,0.0004268006,0.0004136014,0.0004008104,0.0003884150,0.0003764029,
        0.0003647623,0.0003534817,0.0003425500,0.0003319563,0.0003216903,0.0003117418,
        0.0003021009,0.0002927581,0.0002837043,0.0002749305,0.0002664281,0.0002581885,
        0.0002502039,0.0002424661,0.0002349676,0.0002277010,0.0002206592,0.0002138351,
        0.0002072221,0.0002008135,0.0001946032,0.0001885849,0.0001827528,0.0001771010,
        0.0001716240,0.0001663164,0.0001611729,0.0001561885,0.0001513582,0.0001466773,
        0.0001421412,0.0001377454,0.0001334855,0.0001293573,0.0001253568,0.0001214801,
        0.0001177232,0.0001140825,0.0001105544,0.0001071354,0.0001038221,0.0001006114,
        0.0000974999,0.0000944846,0.0000915626,0.0000887309,0.0000859868,0.0000833276,
        0.0000807506,0.0000782534,0.0000758333,0.0000734881,0.0000712154,0.0000690130,
        0.0000668787,0.0000648104,0.0000628061,0.0000608638,0.0000589815,0.0000571575,
        0.0000553898,0.0000536768,0.0000520168,0.0000504082,0.0000488493,0.0000473386,
        0.0000458746,0.0000444559,0.0000430810,0.0000417487,0.0000404576,0.0000392064,
        0.0000379939,0.0000368189,0.0000356803,0.0000345768,0.0000335075,0.0000324712,
        0.0000314670,0.0000304939,0.0000295509,0.0000286370,0.0000277513,0.0000268931,
        0.0000260614,0.0000252554,0.0000244744,0.0000237175,0.0000229840,0.0000222732,
        0.0000215844,0.0000209169,0.0000202700,0.0000196431,0.0000190357,0.0000184470,
        0.0000178765,0.0000173236,0.0000167879,0.0000162687,0.0000157656,0.0000152780,
        0.0000148055,0.0000143477,0.0000139039,0.0000134740,0.0000130573,0.0000126535,
        0.0000122621,0.0000118829,0.0000115154,0.0000111593,0.0000108142,0.0000104798,
        0.0000101557,0.0000098416,0.0000095372,0.0000092423,0.0000089565,0.0000086795,
        0.0000084110,0.0000081509,0.0000078989,0.0000076546,0.0000074178,0.0000071884,
        0.0000069661,0.0000067507,0.0000065419,0.0000063396,0.0000061436,0.0000059536,
        0.0000057694,0.0000055910,0.0000054181,0.0000052506,0.0000050882,0.0000049308,
        0.0000047783,0.0000046306,0.0000044874,0.0000043486,0.0000042141,0.0000040838,
        0.0000039575,0.0000038351,0.0000037165,0.0000036015,0.0000034902,0.0000033822,
        0.0000032776,0.0000031763,0.0000030780,0.0000029828,0.0000028906,0.0000028012,
        0.0000027146,0.0000026306,0.0000025493,0.0000024704,0.0000023940,0.0000023200,
        0.0000022482,0.0000021787,0.0000021113,0.0000020460,0.0000019828,0.0000019214,
        0.0000018620,0.0000018044,0.0000017486
    };
    
    /** Neckles and Labs wavelengths */
    private static final double[] LAMBDA = {
        329.80, 331.80, 333.80, 335.90, 337.90, 339.80, 341.90, 343.80, 345.80, 347.90,
        349.80, 351.90, 353.90, 355.90, 357.90, 360.00, 362.00, 364.10, 366.10, 367.80,
        369.80, 371.90, 373.70, 375.50, 377.50, 379.40, 381.40, 383.40, 385.40, 387.40,
        389.40, 391.20, 393.20, 395.00, 396.90, 398.90, 400.10, 402.00, 404.00, 406.00,
        407.90, 409.90, 411.70, 413.70, 415.60, 417.60, 419.10, 421.10, 423.10, 424.80,
        426.80, 428.60, 430.60, 432.60, 434.00, 435.90, 437.20, 439.20, 440.90, 442.80,
        444.70, 446.40, 448.30, 450.30, 452.40, 454.40, 456.40, 458.40, 460.40, 462.40,
        464.40, 466.40, 468.40, 470.40, 472.30, 474.30, 476.30, 478.30, 480.30, 482.30,
        484.30, 486.30, 488.30, 489.30, 491.30, 493.30, 495.10, 497.10, 498.90, 500.90,
        502.90, 504.90, 506.80, 508.80, 510.80, 512.80, 514.80, 516.80, 518.80, 520.00,
        521.90, 523.90, 525.80, 527.80, 529.80, 531.60, 533.50, 535.40, 537.20, 539.20,
        541.00, 543.00, 545.00, 547.00, 549.00, 550.80, 552.70, 554.70, 556.70, 558.70,
        560.70, 562.70, 564.60, 566.60, 568.60, 570.60, 572.60, 574.60, 576.60, 578.50,
        580.50, 582.50, 584.50, 586.50, 588.40, 590.40, 592.30, 594.30, 596.30, 598.30,
        600.30, 602.30, 604.30, 606.30, 608.00, 610.00, 612.00, 614.00, 616.00, 618.00,
        620.00, 622.00, 623.90, 625.90, 627.90, 629.90, 631.90, 633.90, 635.90, 637.90,
        639.90, 641.90, 643.90, 645.90, 647.90, 649.90, 651.90, 653.90, 655.90, 662.10,
        666.30, 679.00, 709.00
    };
    /** Neckels and Labs Irradiance */
    private static final double[] E0 = {
        107.65, 98.70, 95.00, 91.00, 88.95, 100.85, 95.75, 87.85, 94.40, 95.40,
        98.40, 97.30, 115.55, 108.00, 76.30, 108.85, 106.90, 101.60, 128.80, 117.85,
        123.05, 119.00, 98.45, 104.70, 139.00, 122.95, 114.80, 74.90, 103.05, 99.90,
        117.30, 129.95, 76.55, 130.10, 88.65, 160.60, 170.15, 178.55, 162.20, 164.55,
        169.15, 166.00, 181.35, 173.30, 178.85, 169.25, 165.60, 181.85, 165.00, 175.10,
        162.00, 164.90, 123.00, 179.35, 173.65, 185.55, 184.35, 167.35, 179.35, 195.55,
        194.80, 185.15, 202.00, 213.00, 199.65, 201.30, 205.90, 201.60, 202.15, 209.45,
        199.45, 195.65, 201.10, 194.30, 201.85, 203.20, 197.20, 205.05, 206.40, 204.15,
        201.20, 171.50, 187.75, 193.95, 188.40, 193.50, 198.90, 199.35, 192.10, 182.35,
        192.20, 191.55, 196.70, 192.75, 193.20, 189.50, 185.25, 169.20, 173.30, 181.80,
        188.10, 191.35, 183.15, 180.80, 194.10, 193.40, 184.35, 193.75, 184.95, 184.25,
        180.50, 185.45, 188.75, 184.35, 186.75, 185.80, 185.35, 188.10, 180.05, 179.95,
        180.40, 185.35, 182.90, 182.20, 133.70, 178.90, 187.25, 184.25, 184.15, 180.25,
        184.00, 184.40, 183.30, 178.95, 174.50, 173.85, 177.65, 178.70, 179.60, 173.15,
        172.45, 170.55, 175.85, 173.70, 173.00, 172.00, 173.80, 169.95, 166.90, 172.50,
        171.50, 169.05, 165.70, 165.80, 168.15, 164.00, 165.00, 164.15, 165.70, 166.25,
        162.05, 160.95, 162.00, 161.20, 161.20, 156.45, 160.20, 159.05, 137.30, 157.45,
        155.00, 146.95, 138.00
    };
    //private static double[] OZONE_LAMBDA;
    //private static double[] OZONE_ABSORPTION;

    static {

        // Read the Ozone information
        /*try {
            FlatFileReader ffr = new FlatFileReader(SystemUtilities.getFile("/org/mbari/model/solar/ozone.txt"));
            OZONE_LAMBDA = ffr.getColumn(0);
            OZONE_ABSORPTION = ffr.getColumn(1);
        }
        catch (IOException e) {
            log.error("Failed to initialize class. Couldn't read ozone absorption", e);
            OZONE_LAMBDA = new double[]{Double.NaN};
            OZONE_ABSORPTION = new double[]{Double.NaN};
            } */

        /** Temporary Dobson values. They're converted by estimDobson */
        double[] dobsonTmp = {
            395, 395, 395, 395, 395, 392, 390, 387, 376,
            354, 322, 292, 269, 254, 248, 246, 247, 251,
            255, 260, 266, 271, 277, 286, 295, 306, 319,
            334, 344, 344, 338, 331, 324, 320, 316,
            433, 433, 433, 436, 432, 428, 426, 418, 402,
            374, 338, 303, 278, 261, 251, 246, 248, 250,
            254, 258, 262, 265, 270, 278, 286, 294, 303,
            313, 322, 325, 324, 317, 306, 299, 294,
            467, 470, 460, 459, 451, 441, 433, 420, 401,
            377, 347, 316, 291, 271, 260, 254, 254, 255,
            257, 259, 261, 264, 269, 277, 284, 289, 296,
            305, 312, 315, 317, 312, 305, 299, 295,
            467, 465, 462, 455, 444, 431, 421, 410, 395,
            373, 348, 325, 304, 287, 275, 267, 261, 259,
            258, 259, 260, 263, 271, 278, 284, 289, 297,
            306, 314, 318, 319, 313, 302, 302, 302,
            411, 414, 416, 415, 410, 406, 402, 394, 382,
            363, 342, 324, 307, 291, 279, 271, 264, 260,
            258, 257, 258, 264, 271, 281, 291, 303, 312,
            318, 322, 323, 322, 322, 322, 322, 322,
            371, 371, 370, 368, 367, 372, 375, 372, 360,
            341, 323, 311, 301, 290, 282, 275, 268, 263,
            259, 256, 258, 264, 273, 289, 306, 319, 327,
            328, 328, 337, 337, 337, 337, 337, 337,
            333, 332, 332, 334, 338, 346, 350, 346, 335,
            321, 310, 302, 296, 289, 284, 280, 274, 268,
            262, 259, 261, 268, 279, 295, 315, 331, 340,
            342, 338, 344, 340, 340, 340, 340, 340,
            311, 308, 308, 313, 320, 327, 330, 326, 319,
            310, 303, 298, 291, 286, 283, 281, 277, 273,
            268, 264, 266, 274, 288, 306, 327, 343, 353,
            355, 351, 339, 325, 307, 294, 294, 294,
            283, 291, 302, 308, 312, 317, 318, 313, 307,
            300, 295, 290, 284, 279, 279, 279, 278, 276,
            272, 270, 273, 282, 295, 313, 333, 348, 360,
            367, 368, 353, 324, 291, 267, 253, 230,
            299, 299, 299, 309, 315, 317, 317, 312, 302,
            291, 283, 280, 275, 270, 268, 267, 263, 263,
            265, 269, 277, 287, 301, 317, 336, 354, 371,
            387, 402, 402, 374, 333, 294, 274, 259,
            314, 314, 314, 314, 332, 332, 327, 322, 311,
            297, 284, 276, 270, 263, 261, 260, 258, 259,
            264, 270, 278, 286, 298, 311, 323, 335, 350,
            366, 381, 390, 388, 376, 357, 346, 341,
            358, 358, 358, 358, 358, 358, 353, 349, 338,
            320, 299, 281, 267, 256, 252, 251, 251, 253,
            257, 264, 272, 279, 287, 297, 307, 318, 332,
            347, 358, 365, 366, 364, 358, 356, 353
        };

        int n = -1;
        for (int c = 0; c < 12; c++) {
            for (int r = 0; r < 35; r++) {
                n = n + 1;
                DOBSON_TABLE[r][c] = dobsonTmp[n];
            }
        }

    }

    /**
     * @return the wavelength of Neckles and Labs Extra-terrestrial Irradiance in
     * nanometers (cf. getNeckelLabIrradiance())
     */
    public static final double[] getNeckelLabWavelengths() {
        double[] lambda = new double[LAMBDA.length];
        System.arraycopy(LAMBDA, 0, lambda, 0, LAMBDA.length);
        return lambda;
    }

    public static final double[] getNeckelLabIrradiance(double[] lambda) {
        return Matlib.interpolate(getNeckelLabWavelengths(), getNeckelLabIrradiance(), lambda);
    }

    /**
     * @returns Neckels and Labs extra-terrestrial irradiance (uW cm^-2 nm^-2)
     */
    public static final double[] getNeckelLabIrradiance() {
        double[] e0 = new double[E0.length];
        System.arraycopy(E0, 0, e0, 0, E0.length);
        return e0;
    }

    public static final double[] getOzoneWavelengths() throws IOException {
        double[] lambda = new double[OZONE_LAMBDA.length];
        System.arraycopy(OZONE_LAMBDA, 0, lambda, 0, OZONE_LAMBDA.length);
        return lambda;
    }

    public static final double[] getOzoneAbsorption() throws IOException {
        double[] e0 = new double[OZONE_ABSORPTION.length];
        System.arraycopy(OZONE_ABSORPTION, 0, e0, 0, OZONE_ABSORPTION.length);
        return e0;
    }

    public static final double[] getOzoneAbsorption(double[] lambda) throws IOException {
        return Matlib.interpolate(getOzoneWavelengths(), getOzoneAbsorption(), lambda);
    }

    /**
     * Low Precision
     * This is equal to 1/earthSunDistance
     */
    public static double getEarthSunIrradianceCorrectionLP(int dayOfYear) {
        double e = SolarUtil.EARTH_ORBIT_ECCENTRICITY;	 // Earth's orbital eccentricity
        return Math.pow((1 + e * Math.cos(2D * Math.PI * (dayOfYear - 3D) / 365D)), 2D);
    }

    /**
     * Low Precision
     * Distance in astronomical units
     */
    public static double getEarthSunDistanceLP(int dayOfYear) {
        return 1D / SolarUtil.getEarthSunIrradianceCorrectionLP(dayOfYear);
    }

    public static double[] getCorrectedETIrradiance(double[] lambda, int dayOfYear) {
        double[] e0 = SolarUtil.getNeckelLabIrradiance(lambda);
        double earthSunDistance = SolarUtil.getEarthSunIrradianceCorrectionLP(dayOfYear);
        double[] Es = new double[e0.length];  // Extraterrestrial irradiance corrected for earth-sun distance
        for (int i = 0; i < e0.length; i++) {
            Es[i] = e0[i] * earthSunDistance;
        }
        return Es;
    }

    /**
     * Estimate Dobson units from climatology, given the month and
     * latitude.  Table has 12 columns, one per month, and 35 rows,
     * from 85 N to -85, in steps of 5 deg lat.
     *
     * Note: corrected two bad PAR values in table (eg, 396 -> 296)
     *
     * Subroutine EstimDobson( month, lat, Dobson )
     */
    public static double estimateDobson(int month, double lat) {

        int i1;
        int i2;
        double dobson;
        double fac;
        double diffLat;


        month = month - 1;  // Java indexs arrays starting at 0
        if (lat >= 85) {
            dobson = DOBSON_TABLE[0][month];
        }
        else if (lat <= -85) {
            dobson = DOBSON_TABLE[34][month];
        }
        else if (lat >= 0) {
            i1 = 17 - (int) (lat / 5.0);
            i2 = i1 + 1;
            fac = (DOBSON_TABLE[i2][month] - DOBSON_TABLE[i1][month]) / (-5.0);
            diffLat = lat - (90.0 - (i1 * 5.0));
            dobson = DOBSON_TABLE[i1][month] + fac * diffLat;
        }
        else {
            i1 = 18 - (int) (lat / 5.0);
            i2 = i1 + 1;
            fac = (DOBSON_TABLE[i2][month] - DOBSON_TABLE[i1][month]) / (-5.0);
            diffLat = lat - (90.0 - (i1 * 5.0));
            dobson = DOBSON_TABLE[i1][month] + fac * diffLat;
        }

        return dobson;
    }

}
